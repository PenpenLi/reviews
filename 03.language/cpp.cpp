
//*========================================================================================================================
--[[ 偏向c++的问题 
0.内存
野指针：指向内存被释放的内存或者没有访问权限的内存的指针。
内存泄漏：一个不再被程序使用的对象或变量还在内存中占有存储空间。
内存泄漏：程序中已经动态分配的堆内存由于某种原因未释放，造成内存的浪费。
内存溢出：内存不够。
在堆上分配动态内存和释放动态内存的方法是new和delete，检测工具：Visual Leak Detector和Instruments
malloc和free是C语言标准函数库中的两个函数，new/delete是C++语言中两个运算符。
内存的划分：https://www.jianshu.com/p/4799c37a3f02

1.是不是一个父类写了virtual函数，如果子类覆盖他的函数不加virtual也能实现多态？
是的，virtual会被隐形的继承的

2.如果是要你的代码在编译时发现编译器类型，就判断_cplusplus或_STDC_宏，通常许多编译器还有其他编译标志宏，
#ifdef __cplusplus
       cout<<"c++";
#else
       cout<<"c";
#endif

3.C++ 中析构函数为什么要求是虚的
如果我们删除一个指向派生类对象的基类指针，而基类析构函数又是非虚的话， 那么就会先调用基类的析构函数，派生类的析构函数得不到调用

4.class a{} 内存中的大小；
https://blog.csdn.net/u011012049/article/details/48767917

5.C++智能指针原理
使用智能指针能更好的管理堆内存
智能指针实质是一个对象，行为表现的却像一个指针。
智能指针在C++11版本之后提供，包含在头文件<memory>中，shared_ptr、unique_ptr、auto_ptr

6.C++ 常量指针与指针常量
https://www.cnblogs.com/r0xFED/p/10604132.html
const int p;      // p  为常量，初始化后不可更改
const int* p;     // *p 为常量，不能通过*p改变它指向的内容 
int const* p;     // *p 为常量，同上
int* const p;     // p  为常量，初始化后不能再指向其它内容

7.const
https://blog.csdn.net/ypshowm/article/details/89030156



9.C++ 特点
面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了；
面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。 [2] 
面向对象程序设计中的概念主要包括：对象、类、数据抽象、继承、动态绑定、数据封装、多态性、消息传递。
对象则是数据和动作的结合体。
多态是接口的多种不同的实现方式。编译时多态和运行时多态。比如重载和重写。
二段构建模式：初始化时会遇到图片资源不存在等异常，而C++构造函数无返回值，只能用try-catch来处理异常，
启用try-catch会使编译后二进制文件大不少，故需要init返回bool值。另外可以加入内存管理。
防御式编程模式：考虑程序可能存在的一些bug而采取的一种措施。CC_SAFE_DELETE

工厂和内存池：创建很多的子弹，方便维护内存分配释放，管理等
管理和单例：键值对的方式存储对象，用于设置和获取。SpriteFrameCache
外观模式：而是封装了一组对象，通过它的接口，调用内部各个对象的功能模块。SimpleAudioEngine
慎用STL的智能指针
--]]

========================================================================================================================
//*/
